//////////////////////////////////////////////////////////////////////
// (c) Janusz Ganczarski
// http://www.januszg.hg.pl
// JanuszG@enter.net.pl
//////////////////////////////////////////////////////////////////////

#ifndef __SHADERS__H__
#define __SHADERS__H__

#include <GL/glew.h>
#include <GL/freeglut.h>
#include <GL/gl.h>

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera z pliku i jego kompilacja,
// rodzaj shadera okreœla parametr type; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadShader( GLenum type, const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera i jego kompilacja,
// rodzaj shadera okreœla parametr type; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadShader( GLenum type, const char **src );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera wierzcho³ków z pliku 
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadVertexShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera wierzcho³ków
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadVertexShader( const char **src );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera fragmentów z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadFragmentShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera fragmentów
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadFragmentShader( const char **src );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera geometrii z pliku
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadGeometryShader( const char *name );

//////////////////////////////////////////////////////////////////////
// za³adowanie kodu Ÿród³owego shadera geometrii
// i jego kompilacja; funkcja zwraca identyfikator
// obiektu shadera ze skompilowanym shaderem
//////////////////////////////////////////////////////////////////////
GLuint LoadGeometryShader( const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie obiektu shadera z obiektem programu; 
// w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachShader( GLuint &program, GLuint shader );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera fragmentów, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachFragmentShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera fragmentów, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachFragmentShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera geometrii, reprezentowanego przez kod
// Ÿród³owy w pliku, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachGeometryShader( GLuint &program, const char *name );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera geometrii, reprezentowanego przez kod
// Ÿród³owy, z obiektem programu; w razie potrzeby tworzony
// jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachGeometryShader( GLuint &program, const char **src );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków i shadera fragmentów,
// reprezentowanego przez kod Ÿród³owy w plikach, z obiektem programu;
// w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexFragmentShader( GLuint &program, const char *vsName, const char *fsName );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków i shadera fragmentów,
// reprezentowanego przez kod Ÿród³owy, z obiektem programu;
// w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexFragmentShader( GLuint &program, const char **vsSrc, const char **fsSrc );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, shadera geometrii i shadera
// fragmentów, reprezentowanego przez kod Ÿród³owy w plikach, z obiektem
// programu; w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexGeometryFragmentShader( GLuint &program, const char *vsName, const char *gsName, const char *fsName );

//////////////////////////////////////////////////////////////////////
// powi¹zanie shadera wierzcho³ków, shadera geometrii i shadera
// fragmentów, reprezentowanego przez kod Ÿród³owy, z obiektem
// programu; w razie potrzeby tworzony jest nowy obiekt programu
//////////////////////////////////////////////////////////////////////
void AttachVertexGeometryFragmentShader( GLuint &program, const char **vsSrc, const char **gsSrc, const char **fsSrc );

//////////////////////////////////////////////////////////////////////
// konsolidacja i walidacja obiektu programu
//////////////////////////////////////////////////////////////////////
void LinkProgram( GLuint program );

//////////////////////////////////////////////////////////////////////
// usuniêcie obiektów shadera z obiektu programu
//////////////////////////////////////////////////////////////////////
void DeleteShaders( GLuint program );

#endif // __SHADERS__H__
